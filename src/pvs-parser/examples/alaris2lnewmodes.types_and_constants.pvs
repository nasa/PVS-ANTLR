%%
% @module types_and_constants_th
% @author Michael Harrison and Paolo Masci (QMUL and Newcastle University)
% @date April 2014
% @description Types and constants used generically by a range of infusion devices.
%              Maximum infusion rate, maximum and minimum vtbi, timeouts, battery maximum and minimums are parameterised
%%
types_and_constants_th [
   maxrate  : posnat,
   maxinfuse :posnat,
   infusemin: posreal,
   timeout  : nat,
   shorttimeout : nat,
   maxtime  :posnat,
   bat_max: posnat,
   bat_min: posnat
]: THEORY
 BEGIN

%-------------- Constants Definitions
%%
  % @type constants
  % @description Constants relating to menus available in the device
  % @property {maxbag} maximum size of infusion bags, available via bags menu
  % @property {bigstep} used by pump device in functions that are used by the alaris pump theory
  % @property {drate etc} used in display and menu lists
  % @property {mbags, midbags} used as bags menu offsets
  % @property {maxpress} maximum number of times the chevron key can be pressed
%%

   %-- Specific to Alaris GP infusion pump
   maxbags  : nat = 3000
   bigstep  : nat = 10
   drate    : nat = 0
   dvtbi    : nat = 1
   dvol     : nat = 2
   dtime    : nat = 3
   dbags    : nat = 4
   dquery   : nat = 5
   dkvorate : nat = 6
   dnewvtbi : nat = 7
   dnewtime : nat = 8
   dnewrate : nat = 9
   dlock    : nat = 0
   dpdtls   : nat = 6
   mbags    : nat = 9
   midbag   : nat = 4
   
   maxpress : nat = 5
  % tiny_step : real = 0.1
   small_step: real = 1
   big_step: real = 10


%-------------- Type Definitions
%%
  % @type types
  % @description Types that are available in the pump theory
  % @property {irates} infusion rate
  % @property {ivols} volume infused, or to be infused
  % @property {itimes} elapsed time
%%
  
   irates   : TYPE = nonneg_real
   ivols    : TYPE = nonneg_real
   itimes   : TYPE = nonneg_real

   %-- Specific to Alaris GP
%%
  % @type Types 
  % @description Types that are specific to the Alaris GP
  % @property {option_tags} used in effecting an appropriate action associated with the options menu
  % @property {imid_type} range of possible entries in the middle part of the display
  % @property {imid} functional type indicating whether a display is visible in the middle part of the display
  % @property {ifunctions} information that may appear in the displays associated with key1, key2 or key3
  % @property {emodes} the range of modes that determine how a function is to be interpreted
  % @property {ibags} the sizes of bags indicated by the menu
  % @property {ibagscursor} determines the range associated with movement of bags in the cursor menu
  % @property {abags} function type associated with the bags menu
  % @property {qcurse} determines the range associated with the options menu
  % @property {o_menu} the function type associated with the options menu
  % @property {delta} size of the step associated with a chevron key
  % @property {presstime, pausetime} define time button pressed, and time device paused respectively
  % @property {steprate, stepvol, steptime} size of the step for each of rate, volume and time when using the chevron keys
  % @property {chev_buttons} identifies and enumerates the chevron keys
%%
   iline    : TYPE = { holding, infusing, volume, dispvtbi, attention, 
                       vtbidone, dispkvo, setvtbi, setrate, setnotfitted,
                       lockrate, locked, options, dispinfo, 
                       vtbitime, dispblank, clearsetup, batterylow }
   option_tags : TYPE = {ratelock, rateunlock, dosingsumm, adjalarm, 
                         pumpdetails, infusionsetup, setvtbiovertime, 
                         disableratelock, enableratelock, optionblank}
   imid_type  : TYPE = {x: upto(dnewrate) | x >= drate}
   imid       : TYPE = [ imid_type -> boolean ]
   ifunctions : TYPE = { fvol, fvtbi, fcancel, fclear, fnull, fback, fok, 
                         fbags, fquit, fkeep, fyes, fno }
   emodes     : TYPE = { rmode, bagmode, tbagmode, qmode, vtmode, vttmode, 
                         ttmode, nullmode, infusemode }
   ibags      : TYPE = upto(maxbags)
   ibagscursor: TYPE = upto(mbags)
   abags      : TYPE = [ upto(mbags) -> ibags ]
   qcurse     : TYPE = { x: upto(dpdtls) | x >= dlock }
   o_menu     : TYPE = [ qcurse -> option_tags ]
   delta      : TYPE = nat
   presstime : TYPE = upto(maxpress)
   pausetime : TYPE = upto(maxtime)
   steprate:   TYPE = {x: irates | x = small_step OR x=big_step} % OR x=tiny_step}
   stepvol:    TYPE = {x: ivols | x = small_step OR x=big_step} % OR x=tiny_step}
   steptime:    TYPE = {x: itimes | x = small_step OR x= 10*small_step OR x=60 OR x=600}
   chev_buttons: TYPE = {fupb, fdownb, supb, sdownb, nob}

 END types_and_constants_th
